<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentsAndMemberCollectionHaveDifferentItemCount" xml:space="preserve">
    <value>Arguments and Members collection have different item count.</value>
  </data>
  <data name="AverageAggregationIsNotApplicableToType" xml:space="preserve">
    <value>'Average' aggregation is not applicable to type {0}.</value>
  </data>
  <data name="BinaryOperationIsNotSupported" xml:space="preserve">
    <value>Binary operation {0} is not supported.</value>
  </data>
  <data name="BlockIsNotSupported" xml:space="preserve">
    <value>Block is not supported.</value>
  </data>
  <data name="CatchBlockIsNotSupported" xml:space="preserve">
    <value>Catch block is not supported.</value>
  </data>
  <data name="ConditionalBlockIsNotSupported" xml:space="preserve">
    <value>Conditional is not supported.</value>
  </data>
  <data name="ConstantTypeIsNotExpected" xml:space="preserve">
    <value>Constant's type is not expected: {0}. Expected: {1}.</value>
  </data>
  <data name="ConstantValueIsNullButNullIsUnexpected" xml:space="preserve">
    <value>The constant value is null, but null is unexpected.</value>
  </data>
  <data name="DebugInfoIsNotSupported" xml:space="preserve">
    <value>DebugInfo is not supported.</value>
  </data>
  <data name="DefaultIsNotSupported" xml:space="preserve">
    <value>Default is not supported.</value>
  </data>
  <data name="DynamicIsNotSupported" xml:space="preserve">
    <value>Dynamic is not supported.</value>
  </data>
  <data name="ElementInitIsNotSupportedInThisContext" xml:space="preserve">
    <value>ElementInit is not supported in this context.</value>
  </data>
  <data name="ExtensionIsNotSupported" xml:space="preserve">
    <value>Extension is not supported.</value>
  </data>
  <data name="FunctionDoesntTakeArguments" xml:space="preserve">
    <value>The function {1} doesn't take {0} arguments.</value>
  </data>
  <data name="GotoIsNotSupported" xml:space="preserve">
    <value>Goto is not supported.</value>
  </data>
  <data name="IndexIsNotSupported" xml:space="preserve">
    <value>Index is not supported.</value>
  </data>
  <data name="InvocationIsNotSupported" xml:space="preserve">
    <value>Invocation is not supported.</value>
  </data>
  <data name="LabelIsNotSupported" xml:space="preserve">
    <value>Label is not supported.</value>
  </data>
  <data name="LabelTargetIsNotSupported" xml:space="preserve">
    <value>Label target is not supported.</value>
  </data>
  <data name="LambdaIsNotSupportedInThisContext" xml:space="preserve">
    <value>Lambda is not supported in this context.</value>
  </data>
  <data name="ListIntIsNotSupported" xml:space="preserve">
    <value>ListInit is not supported.</value>
  </data>
  <data name="LoopIsNotSupported" xml:space="preserve">
    <value>Loop is not supported.</value>
  </data>
  <data name="MemberAssignmentIsNotSupportedInThisContext" xml:space="preserve">
    <value>MemberAssignment is not supported in this context.</value>
  </data>
  <data name="MemberBindingsIsNotSupportedInThisContext" xml:space="preserve">
    <value>MemberBindings is not supported in current context.</value>
  </data>
  <data name="MemberBindingTypeIsNotSupportedInThisContext" xml:space="preserve">
    <value>Member binding type {0} is not supported in current context.</value>
  </data>
  <data name="MemberInitExpressionIsNotSupportedInThisContext" xml:space="preserve">
    <value>MemberInitExpression is not supported in this context.</value>
  </data>
  <data name="MemberIsNotMappedToTheColumn" xml:space="preserve">
    <value>Member {0} is not mapped to the column.</value>
  </data>
  <data name="MemberIsNotSupported" xml:space="preserve">
    <value>Member {0} is not supported.</value>
  </data>
  <data name="MemberListBindingIsNotSupported" xml:space="preserve">
    <value>MemberListBinding is not supported.</value>
  </data>
  <data name="MemberMemberBindingIsNotSupportedInThisContext" xml:space="preserve">
    <value>MemberMemberBinding is not supported in this context.</value>
  </data>
  <data name="MethodDistinctWithOneArgIsOnlySupported" xml:space="preserve">
    <value>Method Distinct with 1 argument is only supported.</value>
  </data>
  <data name="MethodIsNotSupported" xml:space="preserve">
    <value>Method is not supported: {0}.{1}.</value>
  </data>
  <data name="MethodsOrderByOrderByDescThenByThenByDescWithTwoArgAreOnlySupported" xml:space="preserve">
    <value>Methods OrderBy, OrderByDescending, ThenBy, ThenByDescending with 2 arguments are only supported.</value>
  </data>
  <data name="NewArrayIsNotSupported" xml:space="preserve">
    <value>New Array is not supported.</value>
  </data>
  <data name="NewIsNotSupportedInThisContext" xml:space="preserve">
    <value>New is not supported in this context.</value>
  </data>
  <data name="OnlyLambdaWithOneParameterIsSupportedInSelectClause" xml:space="preserve">
    <value>Only Lambda with 1 parameter is supported in select clause.</value>
  </data>
  <data name="OnlyLambdaWithOneParameterIsSupportedInWhereClause" xml:space="preserve">
    <value>Only Lambda with 1 parameter is supported in where clause.</value>
  </data>
  <data name="ParameterIsLessThanZero" xml:space="preserve">
    <value>Parameter {0} is less than zero.</value>
  </data>
  <data name="PredicateDoesntReturnBoolValue" xml:space="preserve">
    <value>Predicate {0} does not return boolean value.</value>
  </data>
  <data name="ReturnTypeIsNotSupported" xml:space="preserve">
    <value>Return type {0} is not supported.</value>
  </data>
  <data name="RuntimeVariablesAreNotSupported" xml:space="preserve">
    <value>RuntimeVariables are not supported.</value>
  </data>
  <data name="StackIsEmpty" xml:space="preserve">
    <value>Stack is empty.</value>
  </data>
  <data name="SwitchCaseIsNotSupported" xml:space="preserve">
    <value>SwitchCase is not supported.</value>
  </data>
  <data name="SwitchIsNotSupported" xml:space="preserve">
    <value>Switch is not supported.</value>
  </data>
  <data name="TryBinaryIsNotSupported" xml:space="preserve">
    <value>TryBinary is not supported.</value>
  </data>
  <data name="TryIsNotSupported" xml:space="preserve">
    <value>Try is not supported.</value>
  </data>
  <data name="TypeIsNotSupported" xml:space="preserve">
    <value>The type `{0}` is not supported.</value>
  </data>
  <data name="UnableToInterpretateString" xml:space="preserve">
    <value>Unable to interpretate string as {0} value.</value>
  </data>
  <data name="UnaryOperationIsNotSupported" xml:space="preserve">
    <value>Unary operation {0} is not supported.</value>
  </data>
  <data name="UnexpectedStackSize" xml:space="preserve">
    <value>Unexpected stack size: {0}. Expected: 1.</value>
  </data>
  <data name="UnexpectedTreeElementTypeWith1Expected" xml:space="preserve">
    <value>Unexpected tree element type: {0}. Expected: {1}.</value>
  </data>
  <data name="UnexpectedTreeElementTypeWith3Expected" xml:space="preserve">
    <value>Unexpected tree element type: {0}. Expected: {1}, {2} or {3}.</value>
  </data>
  <data name="AtLeastOneItemInCollectionIsNull" xml:space="preserve">
    <value>At least one item in collection is null.</value>
  </data>
  <data name="NoColumnsFoundForType" xml:space="preserve">
    <value>No columns found for type {0}.</value>
  </data>
  <data name="TheModelIgnoresProperty" xml:space="preserve">
    <value>The model ignores '{0}' property.</value>
  </data>
</root>